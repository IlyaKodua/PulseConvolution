const char* ocl_src_inputFile =
"#define M_PI 3.1415926535897932384626433832795f\n"
"inline void atomicAdd_g_f(volatile __global float*addr,float val)\n"
"{\n"
"union\n"
"{\n"
"unsigned int u32;\n"
"float f32;\n"
"}\n"
"next,expected,current;\n"
"current.f32=*addr;\n"
"do\n"
"{\n"
"expected.f32=current.f32;\n"
"next.f32=expected.f32+val;\n"
"current.u32=atomic_cmpxchg((volatile __global unsigned int*)addr,\n"
"expected.u32,next.u32);\n"
"}\n"
"while(current.u32!=expected.u32);\n"
"}\n"
"float2 complex_mull(__global const float2*a,const float2*b)\n"
"{\n"
"float2 c;\n"
"c.x=a[0].x*b[0].x-a[0].y*b[0].y;\n"
"c.y=a[0].x*b[0].y+a[0].y*b[0].x;\n"
"return c;\n"
"}\n"
"float2 complex_mull_2(const float2*a,const float2*b)\n"
"{\n"
"float2 c;\n"
"c.x=a[0].x*b[0].x-a[0].y*b[0].y;\n"
"c.y=a[0].x*b[0].y+a[0].y*b[0].x;\n"
"return c;\n"
"}\n"
"float2 conj(__global const float2*a)\n"
"{\n"
"float2 c;\n"
"c.x=a[0].x;\n"
"c.y=-a[0].y;\n"
"return c;\n"
"}\n"
"__kernel void ambig_calculation(\n"
"__global const float2*sig1,\n"
"__global const float2*sig2,\n"
"__global const uint*id1,\n"
"__global const uint*id2,\n"
"__global float*conv,\n"
"const uint dist_0_idx,\n"
"const int min_dopp,\n"
"const uint sig_size,\n"
"const uint size_dist,\n"
"const uint size_dopp\n"
")\n"
"{\n"
"const int dopp=min_dopp+get_global_id(2);\n"
"const uint dopp_idx=get_global_id(2);\n"
"const uint conv_offset=size_dist*dopp_idx;\n"
"const uint i=get_global_id(0);\n"
"const uint j=get_global_id(1);\n"
"const uint idx_sig1=id1[i];\n"
"const uint idx_sig2=id2[j];\n"
"const int id_dist=idx_sig2-idx_sig1+dist_0_idx;\n"
"if(id_dist>size_dist)\n"
"{\n"
"return;\n"
"}\n"
"const uint idx=id_dist+conv_offset;\n"
"const float2 conj_sig2=conj(&sig2[j]);\n"
"const float2 val=complex_mull(&sig1[i],&conj_sig2);\n"
"const float2 expon={cos(2*M_1_PI/sig_size*dopp*idx_sig1),-sin(2*M_1_PI/sig_size*dopp*idx_sig1)};\n"
"float2 end_val=complex_mull_2(&val,&expon);\n"
"atomicAdd_g_f(&conv[2*idx],end_val.x);\n"
"atomicAdd_g_f(&conv[2*idx+1],end_val.y);\n"
"}";
